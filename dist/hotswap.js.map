{"version":3,"sources":["../src/hotswap.es6.js"],"names":["globals","HotSwapPlugin","path","options","targets","document","querySelectorAll","length","reloads","filter","target","dataset","hotswap","RegExp","test","obj","clone","createElement","nodeName","parent","parentNode","index","children","indexOf","remote","generated","Date","getTime","attributes","attr","value","name","split","uri","params","URLSearchParams","set","toString","setAttribute","replaceChild","LiveReload","addPlugin","window"],"mappings":";;;;;;;;;;AAAA,CAAC,UAASA,OAAT,EAAkB;AAAA,QACTC,aADS;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mCASJC,IATI,EASEC,OATF,EASW;AAClB;;;AAGA,oBAAIC,uCAAcJ,QAAQK,QAAR,CAAiBC,gBAAjB,CAAkC,gBAAlC,CAAd,EAAJ;;AAEA;;;AAGA,oBAAG,CAACF,QAAQG,MAAZ,EAAoB;AAChB,2BAAO,KAAP;AACH;;AAED;;;;AAIA,oBAAIC,UAAUJ,QAAQK,MAAR,CAAe,UAACC,MAAD,EAAY;AACrC,2BAAQ,aAAaA,OAAOC,OAApB,IAA+B,CAACD,OAAOC,OAAP,CAAeC,OAAhD,IAA4D,IAAIC,MAAJ,CAAWH,OAAOC,OAAP,CAAeC,OAA1B,EAAmCE,IAAnC,CAAwCZ,IAAxC,CAAnE;AACH,iBAFa,CAAd;;AAIA;;;AAGA,oBAAG,CAACM,QAAQD,MAAZ,EAAoB;AAChB,2BAAO,KAAP;AACH;;AA1BiB;AAAA;AAAA;;AAAA;AA4BlB,yCAAeC,OAAf,8HAAwB;AAAA,4BAAhBO,GAAgB;;AACpB;;;AAGA,4BAAIC,QAAQX,SAASY,aAAT,CAAuBF,IAAIG,QAA3B,CAAZ;AAAA,4BACIC,SAASJ,IAAIK,UADjB;AAAA,4BAEIC,QAAQ,6BAAIF,OAAOG,QAAX,GAAqBC,OAArB,CAA6BR,GAA7B,CAFZ;AAAA,4BAGIS,SAAST,IAAIG,QAAJ,IAAgB,MAAhB,GAAyB,MAAzB,GAAkC,KAH/C;AAAA,4BAIIO,YAAY,IAAIC,IAAJ,GAAWC,OAAX,EAJhB;;AAJoB;AAAA;AAAA;;AAAA;AAUpB,kDAAgBZ,IAAIa,UAApB,mIAAgC;AAAA,oCAAxBC,IAAwB;;AAC5B,oCAAIC,QAAQD,KAAKC,KAAjB;AACA,oCAAGD,KAAKE,IAAL,IAAaP,MAAhB,EAAwB;AAAA,4DACFK,KAAKC,KAAL,CAAWE,KAAX,CAAiB,GAAjB,CADE;AAAA;AAAA,wCACf9B,KADe;AAAA,wCACT+B,GADS;AAAA,wCAEhBC,MAFgB,GAEP,IAAIC,eAAJ,CAAoBF,GAApB,CAFO;;AAIpBC,2CAAOE,GAAP,CAAW,mBAAX,EAAgCX,SAAhC;AACAK,4CAAQ5B,QAAO,GAAP,GAAagC,OAAOG,QAAP,EAArB;AACH;;AAEDrB,sCAAMsB,YAAN,CAAmBT,KAAKE,IAAxB,EAA8BD,KAA9B;AACH;AArBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBpBf,4BAAIK,UAAJ,CAAemB,YAAf,CAA4BvB,KAA5B,EAAmCD,GAAnC;AACH;;AAED;;;AAtDkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyDlB,uBAAO,IAAP;AACH;AAnEU;AAAA;AAAA,gCAEa;AACpB;;;AAGA,uBAAO,SAAP;AACH;AAPU;;AAAA;AAAA;;AAsEf;;;;;AAGAf,YAAQwC,UAAR,CAAmBC,SAAnB,CAA6BxC,aAA7B;AACH,CA1ED,EA0EGyC,MA1EH","file":"hotswap.js","sourcesContent":["(function(globals) {\n    class HotSwapPlugin {\n        static get identifier() {\n            /*\n             * Reveal this plugin to the LiveReload plugin system so it can only be loaded once.\n             */\n            return 'hotswap';\n        }\n\n        reload(path, options) {\n            /*\n             * Search for specifically targeted scripts/links/images.\n             */\n            let targets = [...globals.document.querySelectorAll('[data-hotswap]')];\n\n            /*\n             * Tell the Reloader to continue its normal processing by returning false;\n             */\n            if(!targets.length) {\n                return false;\n            }\n\n            /*\n             * If the data-hotswap attribute exists but is not set then always reload it,\n             * else test assets that match the regexes passed through data-hotswap.\n             */\n            let reloads = targets.filter((target) => {\n                return ('hotswap' in target.dataset && !target.dataset.hotswap) || new RegExp(target.dataset.hotswap).test(path)\n            });\n\n            /*\n             * Its possible no targets matched our regex or had the data-hotswap attribute, quit early if so.\n             */\n            if(!reloads.length) {\n                return false;\n            }\n\n            for(let obj of reloads) {\n                /*\n                 * Create a new element with an updated src/href attribute adding in the current time for cache-busting.\n                 */\n                let clone = document.createElement(obj.nodeName),\n                    parent = obj.parentNode,\n                    index = [...parent.children].indexOf(obj),\n                    remote = obj.nodeName == 'LINK' ? 'href' : 'src',\n                    generated = new Date().getTime();\n\n                for(let attr of obj.attributes) {\n                    let value = attr.value;\n                    if(attr.name == remote) {\n                        let [path, uri] = attr.value.split('?'),\n                            params = new URLSearchParams(uri);\n\n                        params.set('hotswap-generated', generated);\n                        value = path + '?' + params.toString();\n                    }\n\n                    clone.setAttribute(attr.name, value);\n                }\n\n                obj.parentNode.replaceChild(clone, obj);\n            }\n\n            /*\n             * Returning true tells the Reloader to stop processing the asset after this plugin.\n             */\n            return true;\n        }\n    }\n\n    /*\n     * Cheat the plugin system and add this class in after LiveReload exists.\n     */\n    globals.LiveReload.addPlugin(HotSwapPlugin);\n})(window);\n"]}